---

# 检查主机清单是否正确
- name: Check ansible_ssh_user variable
  fail: msg="ansible_ssh_user == 'root' is not supported, please ssh via normal user"
  when: ansible_ssh_user == 'root'

# 目前只支持 Ubuntu 18.04 操作系统上面安装服务
# 判断操作系统
- name: Get distro name from /etc/os-release
  shell: "([ -f /etc/os-release ] && grep '^NAME=' /etc/os-release | sed s'/NAME=//' | tr -d \\\")"
  changed_when: false
  register: distro_shell_result

- name: Debug distro_shell_result information
  debug:
    var: distro_shell_result.stdout

- name: Check operating system
  fail: msg="Currently, only Ubuntu is supported"
  when: "'Ubuntu' != distro_shell_result.stdout"

# 判断操作系统版本
- name: Get distro_version from /etc/issue
  shell: "cat /etc/issue | head -n 1 | awk '{print $2}' | cut -b 1-5"
  changed_when: false
  register: distro_version_shell_result

- name: Debug distro_version information
  debug:
    var: distro_version_shell_result.stdout

- name: Check operating system version
  fail: msg="Currently, only Ubuntu 18.04 is supported"
  when: "'18.04' != distro_version_shell_result.stdout"

# 设置时区为 utc
- name: set timezone to Etc/UTC
  become: true
  timezone:
    name: Etc/UTC

# 检查 python 
- name: python check
  shell: python --version
  register: py_st
  failed_when: false
  changed_when: false

- name: install python and pip
  become: true
  apt: name={{ item }} state=installed update_cache=yes
  with_items:
    - python
    - python-pip
  when: "'command not found' in py_st.stdout"

- name: python3 check
  shell: python3 --version
  register: py3_st
  failed_when: false
  changed_when: false

- name: install python3 and pip3
  become: true
  apt: name={{ item }} state=installed update_cache=yes
  with_items:
    - python3
    - python3-pip
    - python3-setuptools
  when: "'command not found' in py3_st.stdout" 

- name : Get current system self python3 version
  shell: python3 -c "import sys;print('.'.join([str(i) for i in sys.version_info[:3]]))" | xargs echo -n
  register: result

# - name: Check whether the system comes with pip has been modified
#   become: true
#   get_url:
#     url: "https://bootstrap.pypa.io/get-pip.py"
#     dest: "{{ deploy_dir }}"
#     mode: 0744
#     force: yes
#     validate_certs: no
#   retries: 3
#   delay: "{{ 10 | random }}"
#   when: result.stdout!=self_python_version

# - name: Check whether the system comes with python3 has been modified, revert system python3 link
#   become: true
#   file:
#     state: link
#     force: yes
#     mode: 0744
#     src: /usr/bin/python3.6
#     path: /usr/bin/python3
#   when: result.stdout!=self_python_version

# - name: Check whether the system comes with python3 has been modified, update python3 pip
#   shell: python3 {{ deploy_dir }}/get-pip.py
#   when: result.stdout!=self_python_version

# - name: Install need python module
#   become: true
#   shell: python3 -m pip install six
#   when: result.stdout!=self_python_version

# - name: Check whether update python3-dev
#   become: true
#   apt: name={{ item }} state=installed update_cache=yes
#   with_items:
#     - python3-dev
#   when: result.stdout!=self_python_version

# - name: Install libtbb2 and libgmpxx4ldbl for support psi
#   become: true
#   apt: name={{ item }} state=installed update_cache=yes
#   with_items:
#     - libtbb2
#     - libgmpxx4ldbl
 
- name: check LD_LIBRARY_PATH environment variable
  shell: cat /home/{{ansible_ssh_user}}/.bashrc
  register: bashrc_result
  
- name: rosetta lib search path
  shell: echo {{item}}>>/home/{{ansible_ssh_user}}/.bashrc;source /home/{{ansible_ssh_user}}/.bashrc
  when: bashrc_result.stdout.find('LD_LIBRARY_PATH')==-1
  args:
   executable: /bin/bash
  with_items:
    - export LD_LIBRARY_PATH={{deploy_dir}}/miniconda/envs/python375/lib/python3.7/site-packages/latticex/psi_c 
   

