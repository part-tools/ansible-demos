---
# 检查 ansible 版本和依赖项是否正常安装
- name: Stop if ansible version is too low, make sure that the Ansible version is Ansible 2.4.2 or later, otherwise a compatibility issue occurs.
  assert:
    that:
      - ansible_version.full|version_compare('2.4.2', '>=')

- name: Check if jinja2 installed
  shell: pip list | grep -iw jinja2 | wc -l
  changed_when: false
  register: jinja2_exist

- name: Preflight check - Fail when jinja2 isn't installed
  fail:
    msg: "Jinja2 does not exist, Please run `pip install -r requirements.txt` to install."
  when: jinja2_exist.stdout | int == 0

- name: Get jinja2 info
  shell: pip show jinja2 | grep Version |grep -v Metadata-Version
  changed_when: false
  register: jinja2

- name: Get jinja2 version
  set_fact:
    jinja2_version: "{{ jinja2.stdout_lines[0] | replace('Version: ', '') }}"

- name: Preflight check - Fail when the versions of jinja2 doesn't meet the requirements
  fail:
    msg: "jinja2({{ jinja2_version }}) version is too low, Please run `pip install --upgrade -r requirements.txt` to upgrade."
  when: jinja2_version | version_compare('2.9.6', '<')

# 安装依赖工具
- name: Install dependencies
  become: true
  apt: name={{ item }} state=installed
  with_items:
    - sshpass

# 创建下载文件放置目录
- name: create downloads directory
  file: path="{{ item }}" state=directory mode=0755
  with_items:
  - "{{ downloads_dir }}"

# 检查网络情况
- name: detect outbound network[1]
  shell: curl -s --connect-timeout 10 www.baidu.com 2>/dev/null >/dev/null; echo $?
  args:
    warn: no
  changed_when: false
  register: outbound_network_shell_result

- name: set outbound network fact[1]
  set_fact: has_outbound_network={{ outbound_network_shell_result.stdout.strip() == '0' }}

- name: "Debug has_outbound_network information"
  debug:
    var: has_outbound_network

- name: "check has_outbound_network"
  fail:
    msg: "The Control Machine must have access to the Internet in order to download Datumnetwork related packages."
  when: not has_outbound_network

# 检查docker
- name: Check if docker installed
  shell: docker --version | wc -l
  changed_when: false
  register: docker_exist

- name: include tasks yaml if not docker
  include_tasks: install_docker.yml
  when: docker_exist.stdout | int == 0

- name: Set docker registry mirrors
  become: True
  become_method: sudo
  template:
    src: daemon.json.j2
    dest: /etc/docker/daemon.json
    backup: true

- name: Restart docker systemd
  become: True
  become_method: sudo
  systemd:
    name: docker
    state: restarted
    daemon_reload: yes

# 检查docker-compose
- name: Check if docker-compose installed
  shell: docker-compose --version | wc -l
  changed_when: false
  register: docker_compose_exist

- name: include tasks yaml if not docker-compose
  include_tasks: install_docker_compose.yml
  when: docker_compose_exist.stdout | int == 0

# do actual downloading
- include_tasks: "{{ deployment_method }}_deployment.yml"

