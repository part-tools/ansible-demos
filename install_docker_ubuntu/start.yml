---
# 启动所有服务

# - name: start consul
#   hosts: consul
#   gather_facts: True
#   tags:
#     - consul_servers
#   tasks:
#     - name: start consul
#       shell: "nohup {{ deploy_dir }}/consul/consul agent -config-file {{ deploy_dir }}/consul/config/consul.json &"
#       register: result
#       changed_when: false
#       failed_when: result.rc != 0
#       when: enable_deploy_consul|default(false)

#     - name: Debug consul_http_port_self information
#       debug:
#         var: consul_http_port_self | trim
#       when: enable_deploy_consul|default(false)

#     - name: wait until the consul http port is up
#       wait_for:
#         host: "{{ ansible_host }}"
#         port:  "{{consul_http_port_self | trim}}"
#         state: started
#         msg: "the node_exporter port {{ consul_http_port_self | trim }} is not up"
#       when: enable_deploy_consul|default(false)

#     - name: Other nodes join the cluster
#       shell: "{{ deploy_dir }}/consul/consul join --http-addr {{ansible_host}}:{{consul_http_port_self | trim}} {{consul_leader_ip}}:{{consul_leader_serf_lan_port}}"
#       when: ansible_host != consul_leader_ip and groups['consul'] | length > 1 and  enable_deploy_consul|default(false)
#       register: result
#       changed_when: false
#       failed_when: result.rc != 0
#     # Glacier2
#     - name: get v1/kv/datum/glacier2_ip_port
#       uri:
#         url: http://{{consul_leader_ip}}:{{consul_leader_port}}/v1/kv/datum/glacier2_ip_port
#         return_content: yes
#       when: ansible_host == consul_leader_ip
#       register: glacier2_ip_port_content
#       failed_when: false

#     - name: Debug glacier2_ip_port_content information
#       debug:
#         var: glacier2_ip_port_content
#       when: ansible_host == consul_leader_ip

#     - name: Set glacier2 external network address
#       uri: 
#         url: http://{{consul_leader_ip}}:{{consul_leader_port}}/v1/kv/datum/glacier2_ip_port
#         method: PUT
#         body: "{{ice_via_external_ip}}_{{ice_glacier2_port}}"
#       when: 
#         - ansible_host == consul_leader_ip 
#         - enable_deploy_consul|default(false)

#     # IceGrid
#     - name: get v1/kv/datum/icegrid_ip_port
#       uri:
#         url: http://{{consul_leader_ip}}:{{consul_leader_port}}/v1/kv/datum/icegrid_ip_port
#         return_content: yes
#       when: ansible_host == consul_leader_ip
#       register: icegrid_ip_port_content
#       failed_when: false

#     - name: Debug icegrid_ip_port_content information
#       debug:
#         var: icegrid_ip_port_content
#       when: ansible_host == consul_leader_ip

#     - name: Set icegrid external network address
#       uri: 
#         url: http://{{consul_leader_ip}}:{{consul_leader_port}}/v1/kv/datum/icegrid_ip_port
#         method: PUT
#         body: "{{ice_via_external_ip}}_{{ice_grid_port}}"
#       when: 
#         - ansible_host == consul_leader_ip 
#         - enable_deploy_consul|default(false)

#     - name: get v1/kv/datum/dataCenter_ip_port
#       uri:
#         url: http://{{consul_leader_ip}}:{{consul_leader_port}}/v1/kv/datum/dataCenter_ip_port
#         return_content: yes
#       when: ansible_host == consul_leader_ip
#       register: dataCenter_ip_port_content
#       failed_when: false

#     - name: Debug dataCenter_ip_port_content information
#       debug:
#         var: dataCenter_ip_port_content
#       when: ansible_host == consul_leader_ip

#     - name: Set data center address
#       uri: 
#         url: http://{{consul_leader_ip}}:{{consul_leader_port}}/v1/kv/datum/dataCenter_ip_port
#         method: PUT
#         body: "{{storage_ip}}_{{storage_port}}"
#       when: 
#         - ansible_host == consul_leader_ip 
#         - enable_deploy_consul|default(false)

# - hosts: ice_via
#   tags:
#     - ice_via_servers
#   tasks:
#     - name: start IceGrid
#       shell: "{{ deploy_dir }}/ice_via/bin/run_icegrid.sh"
#       register: result
#       changed_when: false
#       failed_when: result.rc != 0
#       when: enable_deploy_ice_via|default(false)
      
#     - name: wait until the IceGrid port is up
#       wait_for:
#         host: "{{ ansible_host }}"
#         port: "{{ ice_grid_port }}"
#         state: started
#         msg: "the node_exporter port {{ ice_grid_port }} is not up"
#       when: enable_deploy_ice_via|default(false)

#     - name: start Glacier2
#       shell: "{{ deploy_dir }}/ice_via/bin/run_glacier2.sh {{ ice_protocol }}"
#       register: result
#       changed_when: false
#       failed_when: result.rc != 0
#       when: enable_deploy_ice_via|default(false)
      
#     - name: wait until the Glacier2 port is up
#       wait_for:
#         host: "{{ ansible_host }}"
#         port: "{{ ice_glacier2_port }}"
#         state: started
#         msg: "the node_exporter port {{ ice_glacier2_port }} is not up"
#       when: enable_deploy_ice_via|default(false)

- hosts: carrier
  tags:
    - carrier_servers
  tasks:
    # - name: start carrier
    #   shell: "nohup {{ deploy_dir }}/carrier/carrier --config-file {{ deploy_dir }}/carrier/config/carrier.yml >> {{ deploy_dir }}/carrier/log/carrier.log 2>&1 &"
    #   register: result
    #   changed_when: false
    #   failed_when: result.rc != 0
    #   when: enable_deploy_carrier|default(false)

    # - name: wait until the carrier_rpc_port port is up
    #   wait_for:
    #     host: "{{ ansible_host }}"
    #     port: "{{ carrier_rpc_port }}"
    #     state: started
    #     msg: "the node_exporter port {{ carrier_rpc_port }} is not up"
    #   when: enable_deploy_carrier|default(false)

    # 启动容器
    # - name: start carrier service
    #   docker_container: 
    #     name: carrier_service
    #     image: "{{ default_container_image }}:v0.5.0"
    #     state: started
    #     network_mode: "host"
    #     restart: yes
    #     volumes:
    #       - /home/luodahui/test/ansible-demos/install_docker_ubuntu/services/test/carrier.yml:/Carrier/config/carrier.yml
    #       - /home/luodahui/test/ansible-demos/install_docker_ubuntu/services/test/p2p_priv_key/p2p_priv_key:/Carrier/config/p2p_priv_key
    #     command: /Carrier/carrier --config-file /Carrier/config/carrier.yml

    # - name: Run carrier keytool container
    #   become: True
    #   become_method: sudo
    #   shell:
    #     cmd: docker-compose -f docker-compose.yml run run_keytool
    #     chdir: "{{ deploy_dir }}/{{carrier_dir_name}}/config"
    #   register: result
    #   failed_when: result.rc != 0
    #   when: enable_deploy_carrier|default(false)

    - name: Run carrier service container
      become: True
      become_method: sudo
      shell:
        cmd: docker-compose -f docker-compose.yml run run_carrier
        chdir: "{{ deploy_dir }}/{{carrier_dir_name}}/config"
      register: result
      failed_when: result.rc != 0
      # ignore_errors: True
      when: enable_deploy_carrier|default(false)      

# - hosts: admin
#   tags:
#     - admin_servers
#   tasks:
#     - name: start admin
#       shell: "{{ deploy_dir }}/admin/scripts/start_admin.sh admin"
#       register: result
#       changed_when: false
#       failed_when: result.rc != 0
#       when: enable_deploy_admin|default(false)

#     - name: Debug start admin information
#       debug:
#         var: result.stdout
#       when: enable_deploy_admin|default(false)
    
#     - name: wait until the admin_web_port port is up
#       wait_for:
#         host: "{{ ansible_host }}"
#         port: "{{ admin_web_port }}"
#         state: started
#         msg: "the node_exporter port {{ admin_web_port }} is not up"
#       when: enable_deploy_admin|default(false)

# - name: start data
#   hosts: data
#   tags:
#     - data_servers
#   tasks:
#     - name: start data
#       shell: "nohup {{ deploy_dir }}/data/start_v3_service.sh {{ deploy_dir }}/data/config/data.yml data {{deploy_dir}}/miniconda/envs/python375/bin/python &"
#       register: result
#       changed_when: false
#       failed_when: result.rc != 0
#       when: enable_deploy_data|default(false)

#     - name: wait until the data port port is up
#       wait_for:
#         host: "{{ ansible_host }}"
#         port: "{{ data_port_self }}"
#         state: started
#         msg: "the node_exporter port {{ data_port_self }} is not up"
#       when: enable_deploy_data|default(false)

# - name: start compute
#   hosts: compute
#   tags:
#     - compute_servers
#   tasks:
#     - name: start compute
#       shell: "nohup {{ deploy_dir }}/compute/start_v3_service.sh {{ deploy_dir }}/compute/config/compute.yml compute {{deploy_dir}}/miniconda/envs/python375/bin/python &"
#       register: result
#       changed_when: false
#       failed_when: result.rc != 0
#       when: enable_deploy_compute|default(false)

#     - name: wait until the compute port is up
#       wait_for:
#         host: "{{ ansible_host }}"
#         port: "{{ compute_port_self }}"
#         state: started
#         msg: "the node_exporter port {{ compute_port_self }} is not up"
#       when: enable_deploy_compute|default(false)
